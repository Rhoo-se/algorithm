import copy
import heapq
import sys
from collections import deque
import bisect

INF = int(1e9)
input = sys.stdin.readline

N, M, C = map(int, input().split())
graph = [[] * (N+1) for _ in range(N+1)]
distance = [INF] * (N+1)

for _ in range(M):
    X, Y, Z = map(int, input().split())
    graph[X].append([Y, Z])

def dijkstra(start):
    q = []
    heapq.heappush(q, (0, start))
    distance[start] = 0
    while q:
        dist, now = heapq.heappop(q)
        if distance[now] < dist:
            continue
        for i in graph[now]:
            cost = dist + i[1]

            if cost < distance[i[0]]:
                distance[i[0]] = cost
                heapq.heappush(q, [cost, i[0]])


dijkstra(C)
cnt = 0
max_time = -1
for i in range(1, N+1):
    if distance[i] == 0 or distance[i] == 1e9:
        continue
    cnt += 1
    if distance[i] > max_time:
        max_time = distance[i]

print(distance)

print(cnt, max_time)
