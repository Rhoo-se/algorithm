import copy
import heapq
import sys
from collections import deque
import bisect

input = sys.stdin.readline

def find_parent(parent, x):
    if parent[x] != x:
        parent[x] = find_parent(parent, parent[x])
    return parent[x]

def union_parent(parent, a, b):
    a = find_parent(parent, a)
    b = find_parent(parent, b)
    if a > b:
        parent[a] = b
    else:
        parent[b] = a

N, M = map(int, input().split())
parent = [0] * (N+1)

for i in range(1, N+1):
    parent[i] = i

edges = []
total = 0
result = 0

for i in range(M):
    x, y, z = map(int, input().split())
    edges.append((z, x, y))
    total += z
edges.sort()

for edge in edges:
    z, x, y = edge
    if find_parent(parent, x) != find_parent(parent, y):
        union_parent(parent, x, y)
        result += z
        
print(total-result)
