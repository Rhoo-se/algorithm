import copy
import heapq
import sys
from collections import deque
import bisect

input = sys.stdin.readline
test = int(input().strip())
def topology_sort():
    print(graph)
    print(indegree)
    result = []
    q = deque()

    for i in range(1, n+1):
        if indegree[i] == 0:
            q.append(i)

    while q:
        now = q.popleft()
        result.append(now)
        for i in graph[now]:
            indegree[i] -= 1
            if indegree[i] == 0:
                q.append(i)
        if len(q) >= 2:
            print("IMPOSSIBLE")
            return

    for i in result:
        print(i, end = ' ')
    return

for _ in range(test):
    n = int(input().strip())
    indegree = [0] * (n + 1)
    team = list(map(int, input().split()))
    graph = [[] for _ in range(n+1)]
    for i in range(1, n+1):
        for j in range(, )
        graph[team[i]].append
    for i in range(1, n):
        indegree[team[i]] = i
    m = int(input().strip())
    for _ in range(m):
        a, b = map(int, input().split())
        if a in graph[b]:
            graph[b].remove(a)
            graph[a].append(b)
            indegree[a] -= 1
            indegree[b] += 1
        if b in graph[a]:
            graph[a].remove(b)
            graph[b].append(a)
            indegree[b] -= 1
            indegree[a] += 1
    topology_sort()
