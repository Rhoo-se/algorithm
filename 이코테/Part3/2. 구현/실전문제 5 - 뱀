import sys
import bisect
from collections import deque
import heapq

input = sys.stdin.readline
# 벽 or 자기자신과 부딪히면 끝
N = int(input())
K = int(input())

graph = [[0]*N for _ in range(N)]
graph[0][0] = 2
#뱀의 몸통은 1, 뱀의 머리는 2, 사과는 3

for _ in range(K):
    x, y = map(int, input().split())
    graph[x-1][y-1] = 3

global direct
direct_info = []

L = int(input())
for _ in range(L):
    X, C = input().split()
    direct_info.append((int(X), C))
# C의 값이 L -> 왼쪽, D -> 오른쪽
snake = deque()
head_x = 0
head_y = 0
graph[head_x][head_y] = 2
global time
global info_idx
time = 0
info_idx = 0
direct = 'r'
def change_direction():
    global info_idx
    global time
    global direct
    if info_idx >= len(direct_info):
        return
    if time == direct_info[info_idx][0]:
        if direct_info[info_idx][1] == 'L':
            if direct == 'r':
                direct = 'u'
            elif direct == 'l':
                direct = 'd'
            elif direct == 'u':
                direct = 'l'
            elif direct == 'd':
                direct = 'r'
        elif direct_info[info_idx][1] == 'D':
            if direct == 'r':
                direct = 'd'
            elif direct == 'l':
                direct = 'u'
            elif direct == 'u':
                direct = 'r'
            elif direct == 'd':
                direct = 'l'
        info_idx += 1

def play(head_x, head_y):
    global direct
    global time
    while True:
        change_direction()
        head_nx, head_ny = head_x, head_y
        if direct == 'r':
            head_ny = head_y + 1
        elif direct == 'l':
            head_ny = head_y - 1
        elif direct == 'u':
            head_nx = head_x - 1
        elif direct == 'd':
            head_nx = head_x + 1

        if head_nx < 0 or head_nx >= N or\
            head_ny < 0 or head_ny >= N\
            or (head_nx, head_ny) in snake:
            time += 1
            break

        if graph[head_nx][head_ny] == 3:
            graph[head_nx][head_ny] = 0
            snake.append((head_x, head_y))
        else:
            snake.append((head_x, head_y))
            if len(snake) != 0:
                snake.popleft()
        head_x, head_y = head_nx, head_ny

        time += 1

play(0, 0)

print(time)

# 몸통의 좌표를 다 저장해 놓을것인지,
# 아니면 몸통의 좌표값을 1이라고 설정해서 관리할 지

"""
처음에 고민했던게, 이중리스트의 요소값으로 몸통/머리/사과를 나눌지
아니면 몸통/머리/사과를 좌표형태로 리스트에 담아서 관리할지가 고민이었다.
그러나 뱀이 움직일 때 마다 사과의 좌표가 담긴 리스트를 계속 탐색하는게 비효율적이라 생각이 들었고, 전자의 방법으로 문제를 풀려고 했다.
그런데 뱀의 몸통이 길어지고 짧아지고 하는 과정에서 몸통을 따로 다루는 리스트가 없으면 관리할 수가 없다 생각했고, 사과의 좌표만 그래프에 담기로 했다.

또 문제의 조건이 엄청 많다.
1. 사과를 먹으면 사라지는것,
2. 머리가 먼저 움직이고 그다음 몸통의 길이를 조절하는것
3. 최좌상의 좌표가 (1, 1)인것

그리고 구현문제이다 보니 사람마다 풀이법이 다달랐다.
dfs로 푸는 방법도 찾아봐야겠다
"""
