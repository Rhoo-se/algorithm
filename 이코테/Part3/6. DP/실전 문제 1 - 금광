import sys
from collections import deque
import bisect

T = int(sys.stdin.readline().strip())

for _ in range(T):
    max_val = -1
    graph = []
    n, m = map(int, sys.stdin.readline().split())
    dp = [[0]*m for _ in range(n)]
    l = list(map(int, sys.stdin.readline().split()))
    for i in range(n):
        graph.append(l[i*m:i*m+m]) # 리스트 분리
    for i in range(0, n):
        dp[i][0] = graph[i][0] # dp리스트의 1열 초기화
    for i in range(1, m):
        dp[0][i] = max(dp[0][i-1] + graph[0][i], dp[1][i-1] + graph[0][i])
        for j in range(1, n-1):
            dp[j][i] = max(dp[j-1][i-1] + graph[j][i], dp[j][i-1] + graph[j][i], dp[j+1][i-1] + graph[j][i])
        dp[n-1][i] = max(dp[n-1][i-1] + graph[n-1][i],dp[n-2][i-1] + graph[n-1][i])
    print(dp)
    for i in range(0, n):
        if max_val < dp[i][m-1]:
            max_val = dp[i][m-1]
    print(max_val)
