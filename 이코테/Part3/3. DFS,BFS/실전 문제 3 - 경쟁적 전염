from collections import *
import sys
import heapq
import copy

N, K = map(int, sys.stdin.readline().split())
graph = []
for i in range(N):
    graph.append(list(map(int, sys.stdin.readline().split())))
S, X, Y = map(int, sys.stdin.readline().split())

c_S = 0
q = deque()
tmp = deque()
l = []

dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

def bfs(x, y):
    global c_S
    while q:
        x, y, = q.popleft()

        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            if nx < 0 or nx >= N or ny < 0 or ny >= N:
                continue
            if graph[nx][ny] == 0:
                graph[nx][ny] = graph[x][y]
                tmp.append((nx, ny))
        if len(q) == 0:
            c_S += 1
            if c_S == S:
                return

            while tmp:
                w, r = tmp.popleft()
                q.append((w, r))

for i in range(N): # 초기 바이러스가 있는 좌표를 리스트에 저장
    for j in range(N):
        if graph[i][j] != 0:
            l.append((i, j))

q = deque(sorted(l, key = lambda x : graph[x[0]][x[1]])) # 리스트에 저장된 좌표쌍(x, y)을 graph[x][y]의 값을 토대로 오름차순 정렬하여 데크에 삽입

x, y = q.popleft()
q.appendleft((x, y))

bfs(x, y)

print(graph[X-1][Y-1])
