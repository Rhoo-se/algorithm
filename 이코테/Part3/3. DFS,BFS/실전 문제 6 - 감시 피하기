from collections import *
import sys
import heapq
import copy
from itertools import *

graph = []
teacher = []
student = []
obstacle = []
blank = []
flag = ''
ok = 0
dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

def check(graph): # graph 받아서 감시 피할 수 있는지
    for i in range(len(student)):
        for j in range(4):
            x = student[i][0]
            y = student[i][1]
            for k in range(1, N-1):
                nx = x + dx[j]
                ny = y + dy[j]
                if nx < 0 or nx >= N or ny < 0 or ny >= 0:
                    break
                if graph[nx][ny] == 'O':
                    break
                if graph[nx][ny] == 'T':
                    return "NO"
    return "YES"


N = int(sys.stdin.readline().strip())
for i in range(N):
    graph.append(list(sys.stdin.readline().split()))
    #graph.append([list... 이런 식으로 나가는 바람에 삼중 리스트가 되었음..
    #시간 낭비 안하도록 앞으로 잘 생각하자. list 로 바꾸는 것만으로도 벌써 배열이 된것임.

for i in range(N):
    for j in range(N):
        if graph[i][j] == 'T':
            teacher.append((i, j))
        if graph[i][j] == 'O':
            obstacle.append((i, j))
        if graph[i][j] == 'S':
            student.append((i, j))
        if graph[i][j] == 'X':
            blank.append((i, j))


c = list(combinations(blank, 3))

for i in range(len(c)):
    new_graph = copy.deepcopy(graph)
    for j in range(3):
        x = c[i][j][0]
        y = c[i][j][1]
        new_graph[x][y] = 'X'
    flag = check(new_graph)
    if flag == 'YES':
        ok = 1
if ok == 1:
    print("YES")
else:
    print("NO")

