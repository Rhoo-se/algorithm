import copy
import heapq
import sys
from collections import deque
import bisect

input = sys.stdin.readline
INF = int(1e9)

N, M = map(int, input().split())

start = 1
graph = [[] for i in range(N+1)]
distance = [INF] * (N+1)
distance[0] = 0

for i in range(M):
    a, b = map(int, input().split())
    graph[a].append((b))
    graph[b].append((a))

def dij(start):
    q = []
    heapq.heappush(q, (0, start))
    distance[start] = 0
    while q:
        dist, now = heapq.heappop(q)
        if distance[now] < dist:
            continue
        for i in graph[now]:
            cost = dist + 1
            if cost < distance[i]:
                distance[i] = cost
                heapq.heappush(q, (cost, i))
dij(1)
print(distance)
max_value = max(distance)
max_index = (distance.index(max_value))
count = distance.count(max_value)
print(max_index, max_value, count)
