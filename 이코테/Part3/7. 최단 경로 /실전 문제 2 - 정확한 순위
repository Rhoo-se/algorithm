import copy
import heapq
import sys
from collections import deque
import bisect

input = sys.stdin.readline
INF = int(1e9)

N, M = map(int, input().split())

graph = [[] * (N+1) for _ in range(N+1)]
visited = [[False] * (N+1) for _ in range(N+1)]

for i in range(0, N+1):
    graph[i].append(0)

for i in range(1, N+1):
    visited[i][i] = True

def bfs():
    q = deque()
    idx = -1
    for i in range(1, N+1):
        if len(graph[i]) == 0:
            continue
        else:
            idx = i
        break
    if idx == -1:
        return -1

    q.append(idx)
    while q:
        v = q.popleft()

        for i in range(1, len(graph[v])):
            if not visited[v][i]:
                q.append(graph[v][i])
                visited[v][i] = True
                visited[i][v] = True
    return

for i in range(M):
    a, b = map(int, input().split())
    graph[a].append(b)
    visited[a][b] = True
    visited[b][a] = True

rst = bfs()
print(rst)
if rst == -1:
    print("0")
    exit()

else:
    j_cnt = 0
    for i in range(1, N+1):
        for j in graph[i]:
            if j == False:
                continue
            else:
                j_cnt += 1
        if j_cnt == N:
            rst += 1
        j_cnt = 0
print(rst)

### 이차원 방문배열상에서 서로 연결되어있으면 visited 처리 해 주는데, 4번 학생에서 오류가 남. bfs로 풀어보려 했는데 좀 더 고민 해 봐야겠다.
