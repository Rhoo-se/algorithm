import copy
import heapq
import sys
from collections import deque
import bisect

input = sys.stdin.readline
INF = int(1e9)
dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]
T = int(input().strip())

def dij(a, b):
    q = []
    heapq.heappush(q, (graph[0][0], (a, b)))
    while q:
        dist, now = heapq.heappop(q)
        if distance[now[0]][now[1]] < dist:
            continue
        for i in range(4):
            x = now[0] + dx[i]
            y = now[1] + dy[i]
            if x >= 0 and x < N and y >= 0 and y < N:
                cost = dist + graph[x][y]
                if cost < distance[x][y]:
                    distance[x][y] = cost
                    heapq.heappush(q, (cost, (x, y)))

for _ in range(T):
    graph = []
    N = int(input().strip())
    distance = [[INF]*N for _ in range(N)]
    for i in range(N):
        graph.append(list(map(int, input().split())))
    distance[0][0] = graph[0][0]
    dij(0, 0)
    print(distance[N-1][N-1])
