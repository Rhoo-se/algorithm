import sys
import bisect
from collections import deque
import heapq

sys.setrecursionlimit(10**9)
input = sys.stdin.readline

dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

score = 0
again = False
graph = []
for i in range(12):
    graph.append(list(input()))

visited = [[False] * 6 for _ in range(12)]

#R G B P Y
#각 줄에는 6개
def bfs(x, y):
    global score
    global again
    q.append((x, y))
    while q:
        x, y = q.popleft()
        visited[x][y] = True

        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]

            if 0 <= nx < 12 and 0 <= ny < 6:
                if graph[x][y] == graph[nx][ny] and visited[nx][ny] == False:
                    if (x, y) not in bomb:
                        bomb.append((x, y))
                    q.append((nx, ny))
                    if (nx, ny) not in bomb:
                        bomb.append((nx, ny))

    if len(bomb) < 4:
        bomb.clear()

    if len(bomb) >= 4:
        for i in range(len(bomb)):
            a, b = bomb.popleft()
            graph[a][b] = "."
        again = True

def remap():
    for j in range(0, 6):
        for i in range(10, -1, -1):
            if graph[i][j] != ".":
                k = i
                while k < 11 and graph[k+1][j] == ".":
                    graph[k+1][j] = graph[k][j]
                    graph[k][j] = "."
                    k += 1
    for i in range(12):
        for j in range(6):
            visited[i][j] = False

q = deque()
bomb = deque()

while True:
    again = False
    for i in range(12):
        for j in range(6):
            if graph[i][j] != ".":
                bfs(i, j)
    remap()

    if again == True:
        score += 1
    if again == False:
        break

print(score)


# 1. 전체를 조사해서 터트릴 수 있는 것을 모두 터트린다(1연쇄)
# 2. 1번 이후 다시 터질 수 있는 것을 모두 터트린다(2연쇄)
# 3. 1, 2번 반복


"""
일단 bfs문제를 너무 관성으로 풀려고 했었다.

문제 풀 때 내 생각의 흐름 정리 :
1. 주석에 달아놓은 것 처럼 전체를 조사해서 터트리고, 맵을 갱신한 후 다시 터트릴 것을 조사하는 방식으로 코딩하려했다.
2. 그러기 위해 bfs의 시작지점을 찾아야했는데, 평소에 한 지점에서 시작하는 bfs(최단경로)문제를 많이 풀다보니 어느 지점에서 시작해야 하는지 고민을 했었다.
3. 어차피 전수 조사해야되고 그래프도 작으니 (11, 0)에서 시작해서 한번에 조사하려했었다.
4. 맵을 갱신한 후 다시 조사하는 과정은 bfs 내부에서 반복문을 사용해야 하는데, 
   시작지점이 (11, 0)인 bfs함수 안에서 각각의 시작지점의 경우의수 (R, G, B, P, Y, .)를 고려해야했다.(이때부터 짜증남)
5. 또한 맵을 갱신할 때마다 반복문을 쓰자니 각각의 시작지점마다 갱신, 방문리스트 갱신, 다음 이동할 좌표 추가, 원소가 "."인경우,
   각각의 R, G, B 등등의 경우 등등 고려할 조건문이 많아졌다.
6. 코딩을 하다가 너무 복잡해지는 거 같아 뭔가 문제가 있다고 생각하였다.
7. 곰곰히 생각해보니 맵의 크기도 작고, 시간이 많이 걸리지 않는 bfs이므로 시작지점을 (i, j)로 두고 반복문으로 인자를 받는 bfs를 하면 될것 같았다. (.인 경우 배제 가능하니)
8. 이렇게 되면 시작 지점의 경우의 수를 따로 고려할 필요 없이 graph[i][j]가 시작지점으로 고정이 되며 이를 기준으로 비교해 나갈 수 있었다.
9. 큐를 여러개 사용할 때, 중복돼서 들어오는 원소가 있었는데 이를 배제해 주어야 하는 것을 놓쳤고, 다시 실수를 반복하지 않아야겠다 생각했다.
10. 맵을 갱신하는 과정에서 인덱스 조작을 통해 원소를 이동시켜야 했는데, 인덱스 조작을 하는 코딩을 너무 오랜만에 사용하다 보니 간단한 실수가 있었다.

이렇게 bfs 문제의 유형을 하나 또 알아간다.
"""
