import sys
import bisect
from collections import deque
import heapq

sys.setrecursionlimit(10 ** 9)
input = sys.stdin.readline
INF = 1e9

N, M = map(int, input().split())
edges = []
distance = [INF] * (N+1)

for _ in range(M):
    a, b, c = map(int, input().split())
    edges.append((a, b, c))

def bell(start):
    distance[start] = 0
    for i in range(N):
        for j in range(M):
            cur_node = edges[j][0]
            next_node = edges[j][1]
            edge_cost = edges[j][2]
            if distance[cur_node] != INF and distance[next_node] > distance[cur_node] + edge_cost:
                distance[next_node] = distance[cur_node] + edge_cost

                if i == N-1:
                    return True
    return False



if bell(1) == True:
    print(-1)

else:
    for i in range(2, N+1):
        if distance[i] == INF:
            print(-1)
        else:
            print(distance[i])
            
"""
벨만포드 알고리즘 사용한다.
벨만포드는 다익스트라와 비슷한데, 다익스트라는 우선순위큐를 이용해서 모든 노드의(V) 인접한 노드의 값(우선순위큐에 logE로 삽입 총 E번)만 계속 갱신해주잖아?
즉, O(ElogE). 이때, E는 보통 양방향 간선이고 각 한개씩 모두 연결되어있다치면 V^2과 같기에, O(2ElogV) = O(ElogV)

그런데 벨만포드는 모든 노드에 대해 모든 간선리스트를 검사해.(O(V*E)이고, E는 양방향 + 모든 노드가 연결되어있다면 V^2과 같아지므로 최악은 O(V * V^2))
그리고 구현할 때, 그래프로 찾는게 아닌 모든 노드에대해 모든 간선을 거쳐가는거니 고려하며 코딩하기
"""

