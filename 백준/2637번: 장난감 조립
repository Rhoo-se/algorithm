import sys
from collections import deque

input = sys.stdin.readline

N = int(input().strip())  # 부품의 총 수
M = int(input().strip())  # 관계의 수

graph = [[] for _ in range(N+1)]  # 각 부품을 만드는데 필요한 부품과 그 개수
indegree = [0] * (N+1)  # 진입차수
component_count = [[0] * (N+1) for _ in range(N+1)]  # 각 부품을 만드는데 필요한 기본 부품의 수

for _ in range(M):
    X, Y, K = map(int, input().split())
    graph[Y].append((X, K))  # Y를 만드는데 X가 K개 필요
    indegree[X] += 1

def topology_sort():
    q = deque()
    for i in range(1, N+1):
        if indegree[i] == 0:  # 기본 부품
            q.append(i)
            component_count[i][i] = 1  # 기본 부품은 자기 자신을 1개 필요로 함

    while q:
        now = q.popleft()
        for next, need in graph[now]:
            for i in range(1, N+1):
                component_count[next][i] += component_count[now][i] * need  # now를 만드는데 필요한 기본 부품의 개수를 next에 더해줌
            indegree[next] -= 1
            if indegree[next] == 0:
                q.append(next)

topology_sort()

for i in range(1, N+1):
    if component_count[N][i] > 0:  # 완제품을 만드는데 i 기본 부품이 필요한 경우
        print(i, component_count[N][i])

"""
고려해야겠다 생각한 부분
0. 위상정렬의 그래프를 어떻게 생성할 것인가(관계를 어떻게 지정할지)
1. 기본부품을 어떻게 파악할 것인가
2. 중간 or 완성제품을 만들기 위해 필요한 기본부품의 개수는 어떠한 형태로 관리할 것인가
3. 출력의 형식을 어떻게 맞출것인가

--내생각--
0. 먼저 그래프를 어떻게 생성할지에 대해서는 X를 만들 때 Y가 K개 필요하므로, graph[Y].append((X, K))의 형식으로 지정해줘야겠다 생각했음.
이 때 차수가 하나 증가하는것은 당연히.
1. 기본부품은 진입차수가 0인것이 될것이고, 이것들을 따로 관리해줘야겠다는 생각이 들었음. 그래서 basic이라는 리스트에 해당 부품을 추가하였음.
2. 기본부품은 저장했는데, 임의의 중간 or 완성제품이 필요로하는 기본부품의 종류와 개수는 어떻게 지정해줘야하는지 고민이 되었음. 
이때 이중리스트를 생각했어야 했는데, 다차원 리스트 사용하는게 아직 익숙하지는 않았나봄 ,, ㅜㅜ 
X, K가 묶여있으니 이를 반복문을 통해 next, need를 이용해 각각 지정하고, 이중 반복문을 통해 개수를 추가해주면 되는거였음.
3. 출력은 배열의 인덱스와 완성제품의 필요한 부품 개수를 같이 출력

이중리스트를 쓰는것을 두려워하지말자. 또 for next, need와 같이 반복문을 통해 쭉쭉 값을 갱신하는거를 연습해야할듯.
"""
