import sys
import bisect
from collections import deque
import heapq

sys.setrecursionlimit(10**9)
input = sys.stdin.readline

dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

N, K = map(int, input().split())
graph = []
visited = [[False] * N for _ in range(N)]
virus = [deque([]) for _ in range(1001)]


for i in range(N):
    l = list(map(int, input().split()))
    graph.append(l)
    for j in range(N):
        if l[j] != 0:
            virus[l[j]].append((i, j))
            visited[i][j] = True

# S초 후 결과
S, X, Y = map(int, input().split())

def bfs(i, j):
    x, y = i, j
    for T in range(4):
        nx = x + dx[T]
        ny = y + dy[T]
        if 0 <= nx < N and 0 <= ny < N:
            if graph[nx][ny] == 0 and visited[nx][ny] == False:
                graph[nx][ny] = graph[x][y]
                visited[nx][ny] = True
                virus[graph[nx][ny]].append((nx, ny))

for sec in range(S):
    for i in range(1, 1001):
        for _ in range(len(virus[i])):
            a, b = virus[i].popleft()
            bfs(a, b)

print(graph[X-1][Y-1])

# n이라는 종류의 바이러스의 좌표를 virus[n] 리스트에 담아
# virus[n]을 순서대로 pop해서 상하좌우 퍼지게하면 되잖아.
# 처음에 주어지는 기본 좌표는 입력을 받을 때 바로 방문처리를 해도 됨.
