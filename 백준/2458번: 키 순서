# 자기가 몇번째인지 확인하려면, 우선순위나 비교할 만한 껀덕지가 있어야함
# 위상정렬은 안되나? 1 3 5 4 6 2 or 1 3 5 4 2 6
# 진입차수가 대소비교를 나타내는 것은 아니기에 불가능 하겠네,,,
# 각 연결에 가중치 1이 있다고 생각하면 어떨까
# 그러면 start는 어디로 정해야하지?
# 전수조사해서 한 노드를 지나치는 애들, 한 노드가 지나가는 애들을 체크해서
# 모든 visited의 원소가 가 True가 되면 등수 파악가능
# 그러나 내가 생각한 방법은 전수조사를 해야 하기에 시간이 굉장히 오래걸린다.
# 서로간의 연결성을 확인하기 위해선 플로이드워셜로 간단하게 확인할 수 있다.
# 플로이드 워셜이 최단거리를 구할 때 사용하기도 하지만 그 말은 즉슨 연결되어 있기에 최단거리를 구할 수 있다는 뜻임.
# i(출발지점) j(도착지점) 에서 dist[i][j]와 dist[j][i] 둘 다 INF라면 그 둘은 연결되지 않았다는 뜻.
# 따라서 아래와 같이 코드 작성하면 됨.

import heapq
import sys
import math
from collections import deque
import bisect
sys.setrecursionlimit(10**9)

input = sys.stdin.readline
INF = int(1e9)

N, M = map(int, input().split())
dist = [[INF] * (N+1) for _ in range(N+1)]

for i in range(1, N+1):
    dist[i][i] = 0

for _ in range(M):
    a, b = map(int, input().split())
    dist[a][b] = 1
    # a는 b보다 작다는 뜻

for k in range(1, N+1):
    for i in range(1, N+1):
        for j in range(1, N+1):
            if dist[i][j] > dist[i][k] + dist[k][j]:
                dist[i][j] = dist[i][k] + dist[k][j]

ans = 0
for i in range(1, N+1):
    check = True
    for j in range(1, N+1):
        if dist[i][j] == INF and dist[j][i] == INF:
            check = False
            break
    if check:
        ans += 1

print(ans)
