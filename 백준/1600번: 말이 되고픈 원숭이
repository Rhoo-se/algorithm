from sys import stdin
from collections import deque
import sys

K = int(sys.stdin.readline().strip())
W, H = map(int, sys.stdin.readline().split())
flag = 0
horse_x = [-2, -1, 1, 2, 2, 1, -1, -2]
horse_y = [1, 2, 2, 1, -1, -2, -2, -1]
monkey_x = [-1, 1, 0, 0] # 상하좌우
monkey_y = [0, 0, -1, 1] # 상하좌우
graph = [list(map(int, sys.stdin.readline().split())) for _ in range(H)]
visited = [[[0] * (K + 1) for _ in range(W)] for _ in range(H)]
# W가로길이 (열의 개수), H세로길이 (행의 개수)

def bfs():
    q = deque([(0, 0, 0)])
    while q:
        x, y, k = q.popleft()
        if x == H-1 and y == W-1:
            return visited[x][y][k]
        for i in range(4):
            nx = x + monkey_x[i]
            ny = y + monkey_y[i]
            if nx >= 0 and nx < H and ny >= 0 and ny < W and visited[nx][ny][k] == 0 and graph[nx][ny] != 1:
                visited[nx][ny][k] = visited[x][y][k] + 1
                q.append((nx, ny, k))
        if k < K:
            for i in range(8):
                nx = x + horse_x[i]
                ny = y + horse_y[i]
                if nx >= 0 and nx < H and ny >= 0 and ny < W and visited[nx][ny][k+1] == 0 and graph[nx][ny] != 1:
                    visited[nx][ny][k+1] = visited[x][y][k] + 1
                    q.append((nx, ny, k+1))
    return -1
print(bfs())

# 3차원 배열에 대한 이해가 필요했고, 방문지점을 잘 확인해야 했으며 목적지에 빠르게 도달하는 경우가 결국에는 최소값을 구하는 행위라는 점을 알아야 했다.
