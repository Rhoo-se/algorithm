from sys import stdin
from collections import deque
import sys
import bisect

input = sys.stdin.readline
N = int(input().strip())

T = [0] * (N+1)
P = [0] * (N+1)
dp = [0] * (N+2)
for i in range(1, N+1):
    a, b = map(int, input().split())
    T[i] = a
    P[i] = b
idx = 1
for i in range(N, 0, -1):
    if i + T[i] > N: # 퇴사 기간 넘길 때
        dp[i] = dp[i+1]
    else: # 퇴사 기간 안 넘을 때, 해당 날짜에 일을 할지 말지
        dp[i] = max(dp[i+T[i]] + P[i], dp[i+1])
print(dp[1])

"""
dp 테이블을 무작정 만드는 것이 아닌, 이 dp 테이블에 무엇을 저장할지를 먼저 생각해야한다.
(해당 날짜에 얻을 수 있는 최대 수익)

*아래에서 올라갈지 위에서 내려갈지!
-> 아래에서 올라갈 경우에는 해당 상담이 끝나는 날 이후로 반복문을 통해 dp값을 계속 갱신해 줘야한다

-> 위에서 내려올 경우에는 dp를 반복문이 없어도 이전날의 값을 통해 dp값을 갱신 가능하다

1. 먼저 해당 날짜에 일을 했을 때, 퇴사일을 넘기면 건너 뛰는 경우는 생각을 했다.

2. 해당날짜가 퇴사일을 넘기지 않는다면, 그 일을 해야하는지 말아야하는지 결정을 해야했다.

2-1. 해당 날짜에 일을 할 경우, 이전 dp값 + 일을 해서 얻은 수익을 넣어야한다.

2-2 그러면 일을 건너 뛴 날에는 dp값에 무엇을 넣어야할까? -> 이것을 생각해야함.
이전의 dp값을 채워넣어야 한다.(현상유지)
그래야 2-1 에서 dp값이 증가할 때 이전 dp값을 사용할 수 있기 때문.
"""

