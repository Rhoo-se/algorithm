import sys
import bisect
from collections import deque
import heapq

sys.setrecursionlimit(10 ** 9)
input = sys.stdin.readline
INF = 1e9

N = int(input().strip())
M = int(input().strip())

graph = [[] for _ in range(N + 1)]
distance = [INF] * (N + 1)


def dij(start):
    q = []
    heapq.heappush(q, (0, start))
    distance[start] = 0
    while q:
        dist, now = heapq.heappop(q)
        if distance[now] < dist:
            continue
        for i in graph[now]:
            cost = dist + i[1]
            if cost < distance[i[0]]:
                distance[i[0]] = cost
                heapq.heappush(q, (cost, i[0]))

for _ in range(M):
    a, b, c = map(int, input().split())
    graph[a].append((b, c))

start, end = map(int, input().split())

dij(start)
print(distance[end])
