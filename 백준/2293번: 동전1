import sys
import bisect
from collections import deque
import heapq

sys.setrecursionlimit(10**9)
input = sys.stdin.readline

n, k = map(int, input().split())
coin = []
dp = [0] * (k+1)
dp[0] = 1

for i in range(n):
    coin.append(int(input()))

for c in coin:
    for i in range(c, k+1):
        dp[i] += dp[i-c]
print(dp[k])

# 10원을 만드는 과정
# 잘게 쪼개면, 10은 1+9, 2+8, 3+7, .... 5+5 까지 가능하다.
# 여기서 1+9를 살펴보면 이는 1원의 가지수(1개) + 9원을 구하는 가지수.
# 9원을 다시 살펴보면 1+8, 2+7, ... 4+5 까지 된다.
# 이렇게 결국 파고 들다보면 1원을 구하는 경우의수, 2원을 구하는 경우의수
# 쭉쭉 잘게 쪼개진다.
# 1원을 구하는 가지수 = 1 + 0 -> dp[1] = 1
# 2원을 구하는 가지수 = 2+0, 1+1 -> dp[2] = dp[1] + 1
# 3원을 구하는 가지수 = 3+0, 2+1, 1+2, 0+3 인데, 같은게 2번 반복됨.
# 따라서 0+3, 1+2의 경우만 고려해주고, 0+3은 1, 1+2는 dp[1]*dp[2]
# 결국 dp[3] = 1+dp[1]*dp[2]?
#....dp[n] = dp[0]*dp[n] + dp[1]*dp[n-1] ....dp[n//2]
# 4원에 동전이 1,2가 있으면, 원래는 (1, 1, 1, 1), (1, 1, 2), (2, 2)
# 4 = 0+4, 1+3, 2+2 에서 dp[0], dp[1] = 0이므로 dp[2]*dp[2]만 고려.
# 근데 dp[2]는 (1, 1), (2, 0)으로 2가지임.
# 이때, dp[2]*dp[2] = 4인데, (1, 1)&(2, 0) 그리고 (2, 0)&(1, 1)이 중복됨.
# 수학적으로 dp[k]*dp[k]를 구할 때, 중복되는 것을 제거해 줘야함. 뭔가 좀 복잡한데?
# 이에 dp[n]를 구하는 점화식에 변화를 줘야함
# 각 동전별로 반복문을 돌면서 원래 있던 개수에 추가하는 방식으로 해야함
