import copy
import sys
from collections import deque
import bisect

x = int(input())
arr = list(map(int, input().split()))

dp = [arr[0]]

for i in range(x):
    if arr[i] > dp[-1]:
        dp.append(arr[i])
    else:
        idx = bisect.bisect_left(dp, arr[i])
        dp[idx] = arr[i]
print(dp)
print(len(dp))

"""
예를 들어 arr = [10, 20, 60, 40, 50] 이라고 하자.
이 때 최대값 갱신만 해준다면 dp = [10, 20, 60] 이 될것이다.
그런데 해당 예시에서 LIS의 답은 [10, 20, 40, 50]이다. 
위의 예시처럼 20 초과 60 미만의 값이 그 뒤에 나오게 된다면 그것을 고려해 주는 방법을 생각해야 하는데, 
그것이 bisect로 최대의 인덱스에 해당하는 값을 교체 해 주는 것이다.

만약 arr = [10, 20, 60, 15, 25, 35]라고 가정하자.
그렇다면 LIS = [10, 20, 25, 35]가 답인데, 
bisect로 인덱스에 해당하는 값을 교체해 주면, LIS = [10, 15, 25, 35]가 되어 답은 다르다. 하지만 길이는 같다.

(LIS가 아니지만 길이는 같다는 걸 확인하기 위해 위의 예시를 들었지만
이 경우는 답이 2가지임. 10 20 25 35도 되고, 10 15 25 35도 된다.)

따라서 LIS를 구하는 과정은 i로 각 인덱스 탐색 O(N)의 시간이 걸리고
j로 arr[i] > arr[j] 중 dp[j]의 값이 최대인 것을 찾기 위해 순차탐색하여 O(N)이 걸리는데
이 때, 순차탐색을 하는 것이 아닌 이진탐색을 이용하여 O(logN)의 시간이 걸리게 되면 더 빠르게 구할 수 있겠지.

또한 진짜 수열을 구하고 싶으면, dp에 각 원소들이 추가 될 때, 몇 번째 인덱스로 들어가는지에 대한 정보를 담는 새로운 배열을 생성 한 후(prev),
역추적하여 수열을 구할 수 있다.
ex) 새로운 배열(prev)의 값이 0, 1, 2, 3, 0, 0, 0 이면 뒤에서 부터 역추적하여 dp의 최대 길이인 3이 처음으로 나오는 순간부터 0 이 나오는 순간까지 찾아 arr[3] ,arr[2], arr[1], arr[0]을 새로운 배열(answer)에 추가함.
이 후, answer.reverse() 후 print하면 됨.

"""
