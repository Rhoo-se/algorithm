import heapq
import sys
import math
from collections import deque
import bisect

input = sys.stdin.readline

# 대륙을 먼저 구분해야지. (-1, -2, -3 등등으로 대륙을 번호로 구분)
# 바다는 0으로 하자.
# 가장자리에서 대륙이 다르고 다음 1이 나타날 때까지의 최단거리를 찾으면 되겠네
# 그런데 굳이 대륙을 구분할 필요가 없을듯. 가장자리에서 시작해서 다음 1이 나오면 되니.
# 근데 자기 대륙에서 자기 대륙으로 가는경우는,,,?
# 가장자리는 어떻게 파악하는가? -> 사방중에 하나라도 0이 존재하면 가장자리
# 다리의 길이는 어떻게 파악할까?
# 어차피 최소값만 찾으면 됨

# visited에 visiting이라는 정수로 채워나가면서 해당 숫자의 크기보다 작은 경우만 bfs가능하게 하면 되겠다.
# visiting은 가장자리에서 출발할 때마다 1씩 증가하면 되잖아.
# 즉, 최단거리를 구하는 리스트, visited 그래프를 각각 생성해서
# visited에 저장된 visiting보다 작은 곳만 방문하되 min_distance[nx][ny] = min_distance[x][y] + 1 이렇게 하면 되지 않나?

ans = 200
visiting = 1


def island(a, b, number):
    q = deque()
    q.append((a, b))
    graph[a][b] = number
    while q:
        x, y = q.popleft()
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            if 0 <= nx < N and 0 <= ny < N:
                if graph[nx][ny] == 1:
                    graph[nx][ny] = number
                    q.append((nx, ny))

                if graph[nx][ny] == 0:
                    if not edges:
                        edges.append((x, y))
                    if edges[-1] != (x, y):
                        edges.append((x, y))
    return


def bfs(a, b, start):
    global ans
    global visiting

    q = deque()
    q.append((a, b, start))

    min_distance[a][b] = 0
    visited[a][b] = visiting

    while q:
        x, y, s = q.popleft()
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            if 0 <= nx < N and 0 <= ny < N:
                if s == graph[nx][ny]:
                    continue

                #다른 대륙에 도착하면 최단거리 갱신하고 멈춤
                if graph[nx][ny] < 0 and graph[nx][ny] != s:
                    if ans >= min_distance[x][y]:
                        ans = min_distance[x][y]
                    continue

                # 다른 대륙에 도달하는 최단거리 계속 갱신
                # 즉, 바다이면서 visited[nx][ny]가 visiting보다 작아야함. 즉 해당 가장자리부터 출발했을 때 방문한 적이 없는 바다여야함
                if graph[nx][ny] == 0 and visited[nx][ny] < visiting:
                    if min_distance[x][y] >= ans:
                        continue
                    min_distance[nx][ny] = min_distance[x][y] + 1
                    visited[nx][ny] = visiting
                    q.append((nx, ny, s))
    visiting += 1

dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

N = int(input().strip())
graph = [list(map(int, input().split())) for _ in range(N)]
min_distance = [[0] * N for _ in range(N)]
visited = [[0] * N for _ in range(N)]
edges = []

# 대륙간 구분
number = -1
for i in range(N):
    for j in range(N):
        if graph[i][j] == 1:
            island(i, j, number)
            number -= 1

#가장자리를 통해 다리의 최소 길이 찾기
for i, j in edges:
    bfs(i, j, graph[i][j])
print(ans)


"""
최단거리를 항상 비교해야하는 경우에는 중간중간에 이미 구해진 최소값을 넘으면 스킵해주는 코드를 짜야됨
visited 배열을 매번 초기화 하는 것은 비효율적일 수 있으므로 
visited 배열의 원소를 T/F로 단정짓지말고 특정 정수로 계속 초기화하는 것도 방법
"""
