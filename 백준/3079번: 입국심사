import heapq
import sys
import math
from collections import deque
import bisect

input = sys.stdin.readline

N, M = map(int, input().split())
T = []
for _ in range(N):
    T.append(int(input().strip()))
T.sort()
left = T[0]
right = max(T) * M

while left <= right:
    mid = (left + right) // 2
    total = sum(mid // t for t in T)

    if total >= M:
        rst = mid
        right = mid - 1
    else:
        left = mid + 1
print(rst)

"""
공유기 설치 문제를 풀고 난 후 이진탐색의 구현을 어떻게 해야하는지 대충 감을 잡았음.
최대/최소 시간이 정해져 있으니 그것을 토대로 left, right, mid를 설정하고
mid 시간동안 몇 명의 사람이 처리될 수 있는지 계산.
이것을 토대로 이진탐색을 통해 답을 구할 수 있었다.
또한 sum(mid//t for t in T)와 같은 파이썬의 문법적 요소를 적절히 활용할 수 있도록 하자.
"""
