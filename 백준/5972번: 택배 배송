import heapq
import sys

INF = int(1e9)
input = sys.stdin.readline

N, M = map(int, input().split())
distance = [INF] * (N+1)
graph = [[] for _ in range(N+1)]

for i in range(M):
    a, b, c = map(int, input().split())
    graph[a].append((b, c))
    graph[b].append((a, c))

def dij(start):
    distance[start] = 0
    q = []
    heapq.heappush(q, (0, start))
    while q:
        dist, now = heapq.heappop(q)
        if distance[now] < dist:
            continue
        for i in graph[now]:
            cost = dist + i[1]
            if cost < distance[i[0]]:
                distance[i[0]] = cost
                heapq.heappush(q, (cost, i[0]))

dij(1)
print(distance[N])

"""
dist, cost, distance[now], distance[i[0]] 무슨 차이인지, 무엇과 무엇을 비교해야 하는지 헷갈려하지 말고
항상 비교되는게 무엇인지, 어떤 값이 갱신되어야 하는지를 머리속에서 그림을 그려 생각해 보자.
"""
