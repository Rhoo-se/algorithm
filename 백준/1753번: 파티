import sys
import bisect
from collections import deque
import heapq

sys.setrecursionlimit(10**9)
input = sys.stdin.readline
INF = int(1e9)

# N 학생수, M 도로수, X 파티마을
N, M, X = map(int, input().split())

graph = [[] for _ in range(N+1)]
distance = [INF] * (N+1)

for i in range(M):
   a, b, t = map(int, input().split())
   graph[a].append((b, t))

def dij(start):
   q = []
   heapq.heappush(q, (0, start))
   distance[start] = 0
   while q:
      dist, now = heapq.heappop(q)
      if distance[now] < dist:
         continue
      for i in graph[now]:
         cost = dist + i[1]
         if cost < distance[i[0]]:
            distance[i[0]] = cost
            heapq.heappush(q, (cost, i[0]))

def re():
   for i in range(N+1):
      distance[i] = INF

ans = [0] * (N+1)

for i in range(N+1):
   dij(i)
   ans[i] += distance[X]
   re()
   dij(X)
   ans[i] += distance[i]
   re()
ans_min = -1
for i in range(1, N+1):
   if ans_min < ans[i]:
      ans_min = ans[i]

print(ans_min)


"""
다익스트라 알고리즘 이용
"""
